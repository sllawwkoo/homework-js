// –ó–∞–¥–∞—á–∞ 1.
// –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç ¬´–¢–∏—Ä¬ª. –£ –º–∞—Å–∏–≤—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è 1, —è–∫—â–æ —É —Ü—å–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç—ñ —î –∑–∞—î—Ü—å —ñ 0 –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
// –¢–∏—Ä
// –ü–æ–ª—è(–≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ)	–ú–∞—Å–∏–≤, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ø–æ–ª–µ –∑ –∑–∞–π—Ü—è–º–∏
// –ú–µ—Ç–æ–¥–∏ (–¥—ñ—ó)	–ú–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä—ñ–ª—É (–∑–∞–¥–∞—î—Ç—å—Å—è –ø–æ–∑–∏—Ü—ñ—è –ø–æ—Å—Ç—Ä—ñ–ª—É)
// –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

function randomArray(arrayLength) {
	return Array.from({ length: arrayLength }, () =>
		Math.floor(Math.random() * 2)
	);
}

function ShootingField(size) {
	this.field = randomArray(size);
}

ShootingField.prototype.shoot = function (position) {
	if (position < 0 || position >= this.field.length)
		throw new Error("–ü–æ—Å—Ç—Ä—ñ–ª –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –ø–æ–ª—è!");

	if (this.field[position] === 1) {
		this.field[position] = 0;
		console.log("–í–ª—É—á–∏–ª–∏!");
	} else console.log("–ü—Ä–æ–º–∞–∑–∞–ª–∏.");

	return this;
};

ShootingField.prototype.showField = function () {
	const currentField = this.field
		.map((cell) => (cell === 1 ? "üêá" : "‚ñ´Ô∏è"))
		.join(" ");

	console.log("–ü–æ–ª–µ:");
	console.log(currentField);

	return this;
};


const shootingField = new ShootingField(10);
shootingField
	.showField()
	.shoot(3)
	.showField()
	.shoot(5)
	.showField();