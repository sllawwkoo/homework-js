"use strict";

// –ó–∞–¥–∞—á–∞ 4.
// –°–∫–ª–∞–¥. –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤, 
// —è–∫—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞ —Å–∫–ª–∞–¥—ñ: –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É, –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É, –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ñ—ñ—Ä–º–∞ –≤–∏—Ä–æ–±–Ω–∏–∫ (–Ω–∞–∑–≤–∞, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä). 
// –û—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é/–≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –Ω–∞–∑–≤–æ—é —Ñ—ñ—Ä–º–∏.

// –ö–ª–∞—Å –∫–æ–º–ø–∞–Ω—ñ—ó-–≤–∏—Ä–æ–±–Ω–∏–∫–∞
class Manufacturer {
	constructor(name, regNumber) {
		this.name = name;
		this.regNumber = regNumber;
	}
}

// –ö–ª–∞—Å —Ç–æ–≤–∞—Ä—É
class Product {
	constructor(name, unit, quantity, manufacturer) {
		this.name = name;
		this.unit = unit;
		this.quantity = quantity;
		this.manufacturer = manufacturer; // –æ–±'—î–∫—Ç Manufacturer
	}

	addQuantity(amount) {
		if (amount <= 0) throw new Error("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é.");
		this.quantity += amount;
	}

	removeQuantity(amount) {
		if (amount <= 0) throw new Error("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–æ—é.");
		if (amount > this.quantity) throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ.");
		this.quantity -= amount;
	}
}

// –ö–ª–∞—Å —Å–∫–ª–∞–¥
class Store {
	#products = [];

	registerProduct(product) {
		// –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–æ—é –∂ –Ω–∞–∑–≤–æ—é —ñ —Ñ—ñ—Ä–º–æ—é –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
		const existing = this.#products.find(p =>
			p.name.toLowerCase() === product.name.toLowerCase() &&
			p.manufacturer.name.toLowerCase() === product.manufacturer.name.toLowerCase()
		);

		if (existing) {
			existing.addQuantity(product.quantity);
		} else {
			this.#products.push(product);
		}
	}

	dispatchProduct(productName, manufacturerName, amount) {
		const product = this.#products.find(p =>
			p.name.toLowerCase() === productName.toLowerCase() &&
			p.manufacturer.name.toLowerCase() === manufacturerName.toLowerCase()
		);

		if (!product) {
			console.log("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
			return;
		}

		try {
			product.removeQuantity(amount);
			console.log(`‚úÖ –í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${amount} ${product.unit} "${product.name}" –≤—ñ–¥ ${manufacturerName}.`);
		} catch (err) {
			console.error("‚ùå", err.message);
		}
	}

	filterByProductName(name) {
		return this.#products.filter(p =>
			p.name.toLowerCase().includes(name.toLowerCase())
		);
	}

	filterByManufacturerName(manufacturerName) {
		return this.#products.filter(p =>
			p.manufacturer.name.toLowerCase().includes(manufacturerName.toLowerCase())
		);
	}

	printAll() {
		console.log("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ:");
		this.#products.forEach((p, i) => {
			console.log(`${i + 1}. ${p.name} (${p.quantity} ${p.unit}) ‚Äî –≤–∏—Ä–æ–±–Ω–∏–∫: ${p.manufacturer.name}`);
		});
	}
}

const warehouse = new Store();

const m1 = new Manufacturer("–ê–≥—Ä–æ–ü–ª—é—Å", "UA123456");
const m2 = new Manufacturer("–ë—É–¥–ú–∞—Ä–∫–µ—Ç", "UA987654");

warehouse.registerProduct(new Product("–¶–µ–º–µ–Ω—Ç", "–º—ñ—à–∫—ñ–≤", 100, m2));
warehouse.registerProduct(new Product("–ü—ñ—Å–æ–∫", "—Ç–æ–Ω–Ω", 50, m2));
warehouse.registerProduct(new Product("–ù–∞—Å—ñ–Ω–Ω—è –∫—É–∫—É—Ä—É–¥–∑–∏", "–º—ñ—à–∫—ñ–≤", 200, m1));
warehouse.registerProduct(new Product("–î–æ–±—Ä–∏–≤–∞", "–ª—ñ—Ç—Ä—ñ–≤", 300, m1));

// –î–æ–¥–∞—Ç–∏ —â–µ —Ü–µ–º–µ–Ω—Ç—É
warehouse.registerProduct(new Product("–¶–µ–º–µ–Ω—Ç", "–º—ñ—à–∫—ñ–≤", 50, m2));

// –í—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
warehouse.dispatchProduct("–¶–µ–º–µ–Ω—Ç", "–ë—É–¥–ú–∞—Ä–∫–µ—Ç", 70);

// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
console.log("\nüîç –¢–æ–≤–∞—Ä–∏ –∑ –Ω–∞–∑–≤–æ—é '–¶–µ–º–µ–Ω—Ç':");
console.log(warehouse.filterByProductName("—Ü–µ–º–µ–Ω—Ç"));

console.log("\nüîç –¢–æ–≤–∞—Ä–∏ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ '–ê–≥—Ä–æ–ü–ª—é—Å':");
console.log(warehouse.filterByManufacturerName("–∞–≥—Ä–æ"));

// –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ
warehouse.printAll();